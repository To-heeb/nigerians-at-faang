name: ðŸ’» Test and  ðŸš€ Deploy Production

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  tests:
    name: Laravel (PHP ${{ matrix.php-versions }}) Testing
    env:
      DB_PORT: ${{secrets.DB_PORT}}
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      DB_DATABASE: ${{secrets.DB_DATABASE}}
      DB_USERNAME: ${{secrets.DB_USERNAME}}
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
          # MYSQL_ROOT_HOST: "%"
          MYSQL_DATABASE: ${{secrets.DB_DATABASE}}
          MYSQL_USER: ${{secrets.DB_USERNAME}}
          MYSQL_PASSWORD: ${{secrets.DB_PASSWORD}}
          MYSQL_ALLOW_EMPTY_PASSWORD: 1
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    strategy:
      fail-fast: false
      matrix:
        php-versions: ["8.3"]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, fileinfo, mysql
          coverage: none
      - name: Install Composer dependencies
        run: |
          composer clear-cache
          rm -rf vendor composer.lock
          composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate app key
        run: php artisan key:generate

      - name: Clear Config
        run: |
          php artisan config:clear
          php artisan config:cache

      - name: Run Migration
        run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}

      - name: Test with phpunit
        run: php artisan test --testsuite=Unit
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}

  deploy:
    runs-on: ubuntu-latest
    needs: [tests]
    name: ðŸŽ‰ Deploying
    steps:
      # - name: Update ubuntu server
      #   run: |
      #     sudo apt update
      #     sudo apt upgrade -y
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"

      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader --ignore-platform-reqs

      - name: Dump Autoload
        run: composer dump-autoload

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18 # Specify the Node.js version you need

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Prepare deployment files
        run: |
          chmod -R 777 storage bootstrap/cache
          php artisan env:decrypt --env=${{ secrets.ENV_PRODUCTION }} --key=${{ secrets.KEY_PRODUCTION }} --cipher=${{ secrets.CIPHER }}
          cp .env.${{ secrets.ENV_PRODUCTION }} .env
          rm .env.${{ secrets.ENV_STAGING }}.encrypted .env.${{ secrets.ENV_PRODUCTION }}.encrypted .env.${{ secrets.ENV_PRODUCTION }}
          php artisan storage:link
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_HOST }}

      - name: Adding Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: ðŸ“‚ Deploy to server
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-avz --delete --exclude 'storage/app/' --exclude 'storage/logs/' --exclude 'storage'"
          SOURCE: "./"
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          TARGET: ${{ secrets.TARGET_DIR_PRODUCTION }}
          SCRIPT_BEFORE: |
            cat ${{ secrets.SSH_PRIVATE_KEY }} >> ~/.ssh/deploy_key
            chmod 600 ~/.ssh/deploy_key
